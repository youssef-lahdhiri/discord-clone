generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profil {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(uuid())
  serverName String
  imageUrl   String
  inviteCode String @unique

  members  Member[]
  channels Channel[]

  profilId String
  profil   Profil @relation(fields: [profilId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profilId])
}

enum MemberRole {
  ADMIN
  MEMBER
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
  VEDIO
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profilId String
  profil   Profil @relation(fields: [profilId], references: [id], onDelete: Cascade)

  serverId String
  messages Message[]
  server   Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profilId])
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profilId String
  profil   Profil    @relation(fields: [profilId], references: [id], onDelete: Cascade)
  serverId String
  messages Message[]

  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profilId])
  @@index([serverId])
}

model Message {
  id        String  @id @default(uuid())
  content   String  @db.Text
  fileUrl   String? @db.Text
  memberId  String
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  deleted   Boolean @default(false)

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}
